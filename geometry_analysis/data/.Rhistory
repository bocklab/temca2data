p <- melt(data_tbl3, measure.vars=c("dist_mean","sd_2"), variable.name = "parameter") %>%
ggplot(aes(x=section_num, y=value, color=parameter)) +
geom_point() +
xlab("section number") +
ylab("nm")
p
data_tbl3 = dplyr::mutate(data_tbl1, section_num=Z/35) %>%
group_by(section_num) %>%
summarise(dist_mean=mean(distance), dist_sd=sd(distance), sd_2=dist_mean + 2*dist_sd)
p <- melt(data_tbl3, measure.vars=c("dist_mean","sd_2"), variable.name = "parameter") %>%
ggplot(aes(x=section_num, y=value, color=parameter)) +
geom_point() +
xlab("section number") +
ylab("nm")
p
setwd("~/myscripts/data_results/170922-smoothen_and_displacements")
setwd("~/myscripts/data_results/170922-smoothen_and_displacements")
ggsave("170925-mean_2sd_displacement_w_smoothing.png", scale=1.2, width=20, height=6)
kc_nl = read.neurons.catmaid("annotation:^fafb_ms_KCs$", conn=fafb_conn)
kc_disp = get_displacement_dist(kc_nl)
get_displacement_dist <- function(nl) {
nl_sm = nlapply(nl, smooth_neuron, method = "gauss", sigma=5000)
results = list()
for (idx in seq_along(nl)) {
n = nl[[idx]]
n_sm = nl_sm[[idx]]
t6 = sapply(1:nrow(xyzmatrix(n)), function(x) dist(rbind(xyzmatrix(n)[x,], xyzmatrix(n_sm)[x,])))
results[[idx]] = n$d[which(t6 > 3500), "Z"] %>% unique
print(idx)
}
results
}
kc_disp = get_displacement_dist(kc_nl)
kc_disp
nl = kc_nl
nl_sm = nlapply(nl, smooth_neuron, method = "gauss", sigma=5000)
results = list()
for (idx in seq_along(nl)) {
n = nl[[idx]]
n_sm = nl_sm[[idx]]
t6 = sapply(seq_len(nrow(xyzmatrix(n))), function(row) dist(rbind(xyzmatrix(n)[row,], xyzmatrix(n_sm)[row,])))
results[[idx]] = t6
print(idx)
}
data_tbl = list()
for (idx in seq_along(results)) {
data_tbl[[idx]] =
data.frame(results[[idx]], pns[[idx]]$d$Z, as.numeric(names(nl)[[idx]])) %>%
setNames(c("distance", "Z", "skid"))
}
data_tbl4 = bind_rows(data_tbl) %>%
dplyr::mutate(section_num=Z/35) %>%
group_by(section_num) %>%
summarise(dist_mean=mean(distance), dist_sd=sd(distance), sd_2=dist_mean + 2*dist_sd)
setwd(code_dir)
library(catmaid)
?catmaid_get_compact_skeleton
t1 = catmaid_get_compact_skeleton(514562, with_history = TRUE)
t1
names(t1)
t1 = catmaid_get_compact_skeleton(514562, raw = TRUE, with_history = TRUE)
names
names(t1)
t1$nodes
class(t1$nodes)
t1$nodes[[1]]
t1 = catmaid_get_compact_skeleton(514562, raw = TRUE, body=list(with_history = TRUE))
t1
names(t1)
t1$nodes
t1$nodes[[1]]
t1$nodes[[2]]
t1$nodes %>% class
t1 = catmaid_get_compact_skeleton(514562, conn=fafb_conn, raw = TRUE, body=list(with_history = TRUE))
t1$nodes %>% class
t1$nodes %>% length
t1$nodes[1]
names(t1)
t1[3]
t1[4]
t1[5]
t1[2]
skid = 514562
path=file.path("", 1L, skid, 1L, 1L, "compact-skeleton")
path
t2 = catmaid_fetch(path, conn=fafb_conn, body=list(with_history = TRUE))
t2
names(t2)
class(t2)
length(t2)
t2[1]
t2[1][1]
t2[[1]]
t2[[1]][[1]]
t2[[1]][[2]]
t2 = catmaid_fetch(path, conn=fafb_conn, body=list("with_history" = TRUE))
t2
attr(t2)
attributes(t2)
t2 = catmaid_fetch(path, conn=fafb_conn, body=list("with_history" = TRUE, "with_merge_history" = TRUE))
t2
t2[[1]][[2]]
t2 = catmaid_fetch(path, conn=fafb_conn, body=list("with_history" = TRUE, "with_merge_history" = TRUE))
t2[[1]][[2]]
t2[[1]] %>% length
path
t2 = catmaid_fetch(path, conn=fafb_conn, body=list("with_history" = TRUE, "with_merge_history" = TRUE))
t3
t2''
names(t2)
t2
length(t2)
t2[[1]]
t2[[2]]
t2[[1]]
t2[[1]] %>% length
t2[[2]] %>% length
length(t2)
t2[[3]] %>% length
t2[[3]]
path
path=file.path("", pid, skid, ifelse(connectors, 1L, 0L), ifelse(tags, 1L, 0L), "compact-skeleton")
library(catmaid)
skid = 514562
skids = c(514562, 7702)
pid=1
path=file.path("", pid, "skeletons/compact-detail")
skel=catmaid_fetch(path, conn=conn, body=list("with_history" = "true", "skeleton_ids" = skids))
library(catmaid)
skid = 514562
skids = c(514562, 7702)
pid=1
path=file.path("", pid, "skeletons/compact-detail")
skel=catmaid_fetch(path, conn=fafb_conn, body=list("with_history" = "true", "skeleton_ids" = skids))
list("with_history" = "true", "skeleton_ids" = skids)
skel=catmaid_fetch(path, conn=fafb_conn, body=list("with_history" = "true", "skeleton_ids" = skids))
skel
skel=catmaid_fetch(path, conn=fafb_conn, body=list("with_history" = "true", "skeleton_ids" = skids))
skel$skeletons
type(skel$skeletons)
structure(skel$skeletons)
length(skel$skeletons)
skel$skeletons[0]
skel$skeletons[[0]]
skel$skeletons[1]
length(skel$skeletons)
names(skel$skeletons)
library(catmaid)
skid = 514562
skids = list(514562, 7702)
pid=1
path=file.path("", pid, "skeletons/compact-detail")
skel=catmaid_fetch(path, conn=fafb_conn, body=list("with_history" = "true", "skeleton_ids" = skids))
skel=catmaid_fetch(path, conn=fafb_conn, body=list("with_history" = "true", "skeleton_ids" = skid))
names(skel$skeletons)
class(skel$skeletons[[1]])
length(skel$skeletons[[1]])
names(skel$skeletons[[1]])
skel$skeletons[[1]][[1]]
skel$skeletons[[1]][[2]]
skel$skeletons[[1]][[3]]
skel$skeletons[[1]][[4]]
skel$skeletons[[1]][[5]]
skel$skeletons[[1]][[6]]
type(skel$skeletons[[1]][[1]])
class(skel$skeletons[[1]][[1]])
length(skel$skeletons[[1]][[1]])
skel$skeletons[[1]][[1]][[1]]
skel$skeletons[[1]][[1]][[1]]
skel$skeletons[[1]][[1]][1:10]
t5 = lapply(skel$skeletons[[1]][[1]], length)
t5
unique(t5)
sk_t = skel$skeletons[[1]][[1]][1:10]
sk_t
t5 = lapply(1:length(skel$skeletons[[1]]), function(x)
length(x[[9]]))
length(skel$skeletons[[1]])
length(skel$skeletons[[1]][[1]])
t5 = lapply(1:length(skel$skeletons[[1]][[1]]), function(x)
length(x[[9]]))
t5 = lapply(skel$skeletons[[1]][[1]], function(x)
length(x[[9]]))
unique(t5)
skel$skeletons[[1]][[1]][[9]]
skel$skeletons[[1]][[1]][[1]]
skel$skeletons[[1]][[1]][[1]][[9]]
1
skel$skeletons[[1]][[1]][[2]][[9]]
skel$skeletons[[1]][[1]][[2:10]][[9]]
1
t5 = lapply(skel$skeletons[[1]][[1]], function(x) x[[9]])
t5[1:10]
t5[10:40]
t5[40:80]
t5[80:100]
t5[80:120]
skel$skeletons[[1]]
skel$skeletons[[1]][[1]]
skel$skeletons[[1]][[1]] %>% length
skel$skeletons[[1]][[1]][[3884]]
skel$skeletons[[1]][[1]] %>% length()
t6 = sapply(skel$skeletons[[1]][[1]], function(x) x[[1]])
t6[1:10]
which(t6 == 2731704)
skel$skeletons[[1]][[1]][406,3884]
skel$skeletons[[1]][[1]][c(406,3884)]
1
1
t6 = sapply(skel$skeletons[[1]][[1]], function(x) x[[1]])
t6[:3]
t6[1:3]
table(t6)
table(t6) %>% unqieu
table(t6) %>% unqiue
table(t6) %>% unique()
t6 = sapply(skel$skeletons[[1]][[1]], function(x) x[[1]])
t6[:3]
t6[1:3]
which(t6 == 2717775)
t7 = table(t6)
t7[:10]
t7[1:10]
which(t6 == 16757350)
which(t6 == 3869094)
t6[1:6]
which(t6 == 2717909)
table(t6) %>% unlist %>% unique
?table
class(t6)
tabulate(t6)
?tabulate
table(t6[[1]])
t7 = table(t6)
t7[1:3]
t7[3866:3869"3869012"]
t7[3866:3869]
t7[3861:3869]
source('~/myscripts/bocklab_git/bocklab/zhihao/r/scripts/170927-compute_active_bouts.R', echo=TRUE)
t1 = get_ped(kc_v13, "indices")
t1 = get_ped(kc_v13[[1]], "indices")
t1 = get_ped(kc_v13[[2]], "indices")
ped_n = subset(n, get_ped(n, "indices"))
kc_v13_ped[[i]] = ped_n
rp = subset_nodes(response_v13[[i]], get_ped(n))
results[[i]] = get_time(ped_n, rp, n$skid)
is.neuron(ped_n)
n$skid
n = ped_n
skid=282181
tt = sapply(rp[[1]], function(x) c(x[[9]], x[[10]])) %>% get_aggregated_time
tt = sapply(rp[[1]], function(x) c(x[[9]], x[[10]]))
tt[1:3]
install.packages("circlize", lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library(circlize)
circos.link(sector.index1, 0, sector.index2, 0)
factors = letters[1:8]
circos.par(points.overflow.warning = FALSE)
circos.initialize(factors = factors, xlim = c(0, 10))
circos.track(factors = factors, ylim = c(0, 1), bg.col = "grey",
bg.border = NA, track.height = 0.05)
circos.link("a", 5, "c", 5, border = 1)
circos.link("b", 5, "d", c(4, 6), border = 1)
circos.link("a", c(2, 3), "f", c(4, 6), border = 1)
circos.link("e", c(2, 3), "g", 5, border = 1)
factors
factors = letters[1:8]
circos.par(points.overflow.warning = FALSE)
circos.initialize(factors = factors, xlim = c(0, 10))
circos.track(factors = factors, ylim = c(0, 1), bg.col = "grey",
bg.border = NA, track.height = 0.05)
circos.link("a", 5, "c", 5, border = 1)
circos.link("b", 5, "d", c(4, 6), border = 1)
circos.link("e", c(2, 3), "g", 5, border = 1)
?chordDiagram
library(nat.nblast)
?nblast
db_fpath = '/Volumes/bock/old_homes/bocklab/people/Zhihao/db/170703_mz19_project_random_model'
db = dbConnect(SQLite(), db_fpath)
summary_100kc = dbReadTable(db, "pre_connected_100kc_summary_170703")
library(xlsx)
library(dplyr)
library(magrittr)
library(pwr)
library(RSQLite)
library(ggplot2)
db_fpath = '/Volumes/bock/old_homes/bocklab/people/Zhihao/db/170703_mz19_project_random_model'
db = dbConnect(SQLite(), db_fpath)
summary_100kc = dbReadTable(db, "pre_connected_100kc_summary_170703")
db_fpath = '/Volumes/bock/old_homes/bocklab/people/Zhihao/db/170703_mz19_project_random_model'
db = dbConnect(SQLite(), db_fpath)
db_fpath = '/Volumes/bock/old_homes/bocklab/people/Zhihao/db/170703_mz19_project_random_model'
db = dbConnect(SQLite(), db_fpath)
summary_100kc = dbReadTable(db, "pre_connected_100kc_summary_170703")
summary_100kc
write.xlsx(summary_100kc, "170703_simulatedKC_data.xlsx")
library(dplyr)
library(RSQLite)
library(reshape2)
library(ggplot2)
db_fpath = '/Volumes/bock/old_homes/bocklab/people/Zhihao/db/170905_fafb_smoothing'
db = dbConnect(SQLite(), db_fpath)
db_list_tables(db)
dbListTables(DB)
dbListTables(db)
su = '~/myscripts/credentials/catmaid_fafb_login_v13.R'
source(su)
# Login FAFB
# source('~/myscripts/credentials/catmaid_fafb_login_v13.R', echo=TRUE)
su = '~/myscripts/credentials/catmaid_fafb_login_v13.R'
data_dir = "/Users/zhengz11/myscripts/data_results"
code_dir = "/Users/zhengz11/myscripts/bocklab_git/bocklab/zhihao/r/scripts"
source(su)
library(dplyr)
library(RSQLite)
library(reshape2)
library(ggplot2)
library(catmaid)
get_displacements <- function(n, n_sm) {
nx = xyzmatrix(n)
nsx = xyzmatrix(n_sm)
r = sapply(seq_len(nrow(nx)), function(x) sqrt(sum((nx[x,] - nsx[x,])^2)))
data.frame(r, n$d$Z/35) %>% setNames(c("distance","section_num"))
}
smooth_nl <- function(nl) nlapply(nl, smooth_neuron, method = "gauss", sigma=12000)
kc_nl = read.neurons.catmaid("annotation:^fafb_ms_KCs$", conn=fafb_conn)
apl_nl = read.neurons.catmaid(203840, conn=fafb_conn)
pn_nl = read.neurons.catmaid("annotation:^fafb_ms_PNs$", conn=fafb_conn)
plot3d(kc_nl)
plot3d(pn_nl)
len(pn_nl)
length(pn_nl)
plot3d(apl_nl)
setwd("~/myscripts/FAFB2017_paper/data")
pwd
getwd()
?save
save(pn_nl, kc_nl, apl_nl, file="neurons_for_jitters.RData")
setwd("/Users/zhengz11/myscripts/git_clone/bocklab_public/temca2data/geometry_analysis")
kc_sm_nl = nlapply(kc_nl, smooth_neuron, method = "gauss", sigma=12000)
apl_sm_nl = nlapply(apl_nl, smooth_neuron, method = "gauss", sigma=12000)
pn_sm_nl = nlapply(pn_nl, smooth_neuron, method = "gauss", sigma=12000)
# start processing neuronlist (nl)
# nl = kc_nl
# nl = apl_nl
nl = c(pn_nl, apl_nl, kc_nl)
nl_sm = smooth_nl(nl)
results = lapply(seq_along(nl), function(x) get_displacements(nl[[x]], nl_sm[[x]]))
# get the means of each section---------
data_tbl2 = bind_rows(results) %>%
group_by(section_num) %>%
summarise(dist_mean=mean(distance))
t1 = data_tbl2$dist_mean
t2 = abs(t1[2:length(t1)] - t1[1:(length(t1)-1)]) / 1e3
t3 = cbind(t2, data_tbl2$section_num[2:length(t1)]) %>% data.frame %>% setNames(c("delta","section_num"))
t4 = seq_len(7062) %>% setdiff(t3$section_num %>% unique) %>% data.frame %>% setNames("section_num") %>% full_join(t3)
p <- ggplot(t4, aes(x=section_num, y=delta)) +
geom_point(size=2) +
scale_y_continuous(breaks = scales::pretty_breaks(12), limits = c(NA, 11), expand = c(0,0)) +
scale_x_continuous(breaks = scales::pretty_breaks(14), expand = c(0,0)) +
theme(panel.grid = element_blank(),
panel.background = element_blank(),
axis.line = element_line(size=1.5)) +
ylab("distance (um)") +
xlab("section number")
p
p <- ggplot(t4, aes(x=section_num, y=delta)) +
geom_point(size=2, alpha=0.6) +
scale_y_continuous(breaks = scales::pretty_breaks(12), limits = c(NA, 11), expand = c(0,0)) +
scale_x_continuous(breaks = scales::pretty_breaks(14), expand = c(0,0)) +
theme(panel.grid = element_blank(),
panel.background = element_blank(),
axis.line = element_line(size=1.5)) +
ylab("distance (um)") +
xlab("section number")
p
p <- ggplot(t4, aes(x=section_num, y=delta)) +
geom_point(size=2, alpha=0.4) +
scale_y_continuous(breaks = scales::pretty_breaks(12), limits = c(NA, 11), expand = c(0,0)) +
scale_x_continuous(breaks = scales::pretty_breaks(14), expand = c(0,0)) +
theme(panel.grid = element_blank(),
panel.background = element_blank(),
axis.line = element_line(size=1.5)) +
ylab("distance (um)") +
xlab("section number")
p
p <- ggplot(t4, aes(x=section_num, y=delta)) +
geom_point(size=4, alpha=0.4) +
scale_y_continuous(breaks = scales::pretty_breaks(12), limits = c(NA, 11), expand = c(0,0)) +
scale_x_continuous(breaks = scales::pretty_breaks(14), expand = c(0,0)) +
theme(panel.grid = element_blank(),
panel.background = element_blank(),
axis.line = element_line(size=1.5)) +
ylab("distance (um)") +
xlab("section number")
p
p <- ggplot(t4, aes(x=section_num, y=delta)) +
geom_point(size=3, alpha=0.4) +
scale_y_continuous(breaks = scales::pretty_breaks(12), limits = c(NA, 11), expand = c(0,0)) +
scale_x_continuous(breaks = scales::pretty_breaks(14), expand = c(0,0)) +
theme(panel.grid = element_blank(),
panel.background = element_blank(),
axis.line = element_line(size=1.5)) +
ylab("distance (um)") +
xlab("section number")
p
setwd("~/myscripts/data_results/171010-smoothen_and_displacements")
p <- ggplot(t4, aes(x=section_num, y=delta)) +
geom_point(size=3, alpha=0.4) +
scale_y_continuous(breaks = scales::pretty_breaks(12), limits = c(NA, 11), expand = c(0,0)) +
scale_x_continuous(breaks = scales::pretty_breaks(14), expand = c(0,0)) +
theme(panel.grid = element_blank(),
panel.background = element_blank(),
axis.line = element_line(size=1.5)) +
ylab("distance (um)") +
xlab("section number")
p
ggsave("171206-displacement_delta_12um_ms_all_cutbg.pdf", width=19.92, height=6)
p <- ggplot(t4, aes(x=section_num, y=delta)) +
geom_point(size=3, alpha=0.2) +
scale_y_continuous(breaks = scales::pretty_breaks(12), limits = c(NA, 11), expand = c(0,0)) +
scale_x_continuous(breaks = scales::pretty_breaks(14), expand = c(0,0)) +
theme(panel.grid = element_blank(),
panel.background = element_blank(),
axis.line = element_line(size=1.5)) +
ylab("distance (um)") +
xlab("section number")
p
p <- ggplot(t4, aes(x=section_num, y=delta)) +
geom_point(size=2.5, alpha=0.4) +
scale_y_continuous(breaks = scales::pretty_breaks(12), limits = c(NA, 11), expand = c(0,0)) +
scale_x_continuous(breaks = scales::pretty_breaks(14), expand = c(0,0)) +
theme(panel.grid = element_blank(),
panel.background = element_blank(),
axis.line = element_line(size=1.5)) +
ylab("distance (um)") +
xlab("section number")
p
p <- ggplot(t4, aes(x=section_num, y=delta)) +
geom_point(size=2.5, alpha=0.4) +
scale_y_continuous(breaks = scales::pretty_breaks(12), limits = c(NA, 11), expand = c(0,0)) +
scale_x_continuous(breaks = scales::pretty_breaks(14), expand = c(0,0)) +
theme(panel.grid = element_blank(),
panel.background = element_blank(),
axis.line = element_line(size=1.5)) +
ylab("distance (um)") +
xlab("section number")
p
ggsave("171206-displacement_delta_12um_ms_all_cutbg_smaller.pdf", width=19.92, height=6)
setwd(code_dir)
t4
head(t4)
median(t4)
median(t4$delta)
?median
median(t4, TRUE)
median(t4$delta, TRUE)
mean(t4)
?mean
mean(t4$delta, na.rm=TRUE)
quantile(t4$delta, c(.90, .99))
?quantile
quantile(t4$delta, na.rm=TRUE)
quantile(t4$delta, .99, na.rm=TRUE)
quantile(t4$delta, .95, na.rm=TRUE)
dim(t4)
median(t4$delta, na.rm=TRUE)
median(t4$delta)
library(catmaid)
library(nat)
library(dplyr)
library(ggplot2)
library(mushroom)
# source(su)
#  id                label
#  53  multiverse2 seed AJ
#  58 multiverse2 seed IJA
#  63  multiverse2 seed LK
# writeWebGL(filename = "170830-multiverse_v7_overlap.html", width = 1000, height = 800)
# make soma start in the same place
p.nhop = 2;    # how many nodes away from central node to consider during rescop procedure.
p.close_thresh = 800; # How close counts as close for nodes
p.rs_dist = 80
gl = read.neuron.catmaid(5117024, conn=fafb_conn) %>% resample(p.rs_dist)
gl_nr = read.neuron.catmaid(5117024, conn=fafb_conn)
nl = read.neurons.catmaid("annotation:^multiverse_teams$", conn=fafb_conn) %>% nlapply(resample, p.rs_dist)
library(catmaid)
library(nat)
library(dplyr)
library(ggplot2)
library(mushroom)
# source(su)
#  id                label
#  53  multiverse2 seed AJ
#  58 multiverse2 seed IJA
#  63  multiverse2 seed LK
# writeWebGL(filename = "170830-multiverse_v7_overlap.html", width = 1000, height = 800)
# make soma start in the same place
p.nhop = 2;    # how many nodes away from central node to consider during rescop procedure.
p.close_thresh = 800; # How close counts as close for nodes
p.rs_dist = 80
gl = read.neuron.catmaid(5117024, conn=fafb_conn) %>% resample(p.rs_dist)
gl_nr = read.neuron.catmaid(5117024, conn=fafb_conn)
nl = read.neurons.catmaid("annotation:^multiverse_teams$", conn=fafb_conn) %>% nlapply(resample, p.rs_dist)
plot3d(gl_nr)
plot3d(gl)
plot3d(nl)
setwd("/Users/zhengz11/myscripts/git_clone/bocklab_public/temca2data/geometry_analysis/")
median(t4$delta, na.rm=TRUE)
setwd("~/myscripts/git_clone/bocklab_public/temca2data/geometry_analysis/data")
save(gl, gl_nr, nl, "multiverse_v13.RData")
save(gl, gl_nr, nl, file="multiverse_v13.RData")
